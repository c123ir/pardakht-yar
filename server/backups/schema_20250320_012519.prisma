generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                 @id @default(autoincrement())
  username             String              @unique
  password             String
  fullName             String
  email                String?             @unique
  phone                String?             @unique
  role                 Role                @default(ADMIN)
  isActive             Boolean             @default(true)
  lastLogin            DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  createdContacts      Contact[]           @relation("ContactCreatedBy")
  groupMemberships     GroupMember[]
  uploadedImages       PaymentImage[]      @relation("UploadedBy")
  createdPayments      PaymentRequest[]    @relation("CreatedBy")
  paidPayments         PaymentRequest[]    @relation("PaidBy")
  updatedPayments      PaymentRequest[]    @relation("UpdatedBy")
  createdGroups        PaymentGroup[]      @relation("GroupCreatedBy")
  requestActivities    RequestActivity[]   @relation("RequestActivityUser")
  uploadedAttachments  RequestAttachment[] @relation("RequestAttachmentUploader")
  createdRequestGroups RequestGroup[]      @relation("RequestGroupCreatedBy")
  createdSubGroups     RequestSubGroup[]   @relation("SubGroupCreatedBy")
  createdRequestTypes  RequestType[]       @relation("RequestTypeCreatedBy")
  assignedRequests     Request[]           @relation("RequestAssignedTo")
  createdRequests      Request[]           @relation("RequestCreatedBy")
}

model PaymentGroup {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?
  color           String?
  creatorId       Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         GroupMember[]
  paymentRequests PaymentRequest[]
  createdBy       User             @relation("GroupCreatedBy", fields: [creatorId], references: [id])

  @@map("payment_groups")
}

model GroupMember {
  id        Int          @id @default(autoincrement())
  groupId   Int
  userId    Int
  createdAt DateTime     @default(now())
  group     PaymentGroup @relation(fields: [groupId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model Contact {
  id              Int                     @id @default(autoincrement())
  companyName     String
  contactPerson   String?
  phone           String?
  email           String?
  address         String?
  nationalId      String?
  economicCode    String?
  description     String?
  bankInfo        Json?
  accessToken     String?                 @unique
  ceoName         String?
  accountantName  String?
  accountantPhone String?
  creatorId       Int
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  fieldOfActivity String?
  createdBy       User                    @relation("ContactCreatedBy", fields: [creatorId], references: [id])
  activities      ContactPortalActivity[]
  paymentRequests PaymentRequest[]
  requests        Request[]               @relation("ContactRequests")
}

model PaymentRequest {
  id               Int                     @id @default(autoincrement())
  title            String
  amount           BigInt
  effectiveDate    DateTime
  description      String?
  status           PaymentStatus           @default(PENDING)
  paymentType      String?
  groupId          Int?
  contactId        Int?
  beneficiaryName  String?
  beneficiaryPhone String?
  isSMSSent        Boolean                 @default(false)
  smsSentAt        DateTime?
  paymentDate      DateTime?
  paidById         Int?
  creatorId        Int
  updaterId        Int?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  portalActivities ContactPortalActivity[]
  notifications    Notification[]
  images           PaymentImage[]
  contact          Contact?                @relation(fields: [contactId], references: [id])
  createdBy        User                    @relation("CreatedBy", fields: [creatorId], references: [id])
  group            PaymentGroup?           @relation(fields: [groupId], references: [id])
  paidBy           User?                   @relation("PaidBy", fields: [paidById], references: [id])
  updatedBy        User?                   @relation("UpdatedBy", fields: [updaterId], references: [id])
}

model PaymentImage {
  id            Int            @id @default(autoincrement())
  paymentId     Int
  fileName      String
  filePath      String
  thumbnailPath String?
  originalName  String?
  mimeType      String?
  size          Int?
  hasWatermark  Boolean        @default(true)
  uploaderId    Int
  uploadedAt    DateTime       @default(now())
  payment       PaymentRequest @relation(fields: [paymentId], references: [id])
  uploadedBy    User           @relation("UploadedBy", fields: [uploaderId], references: [id])
}

model Notification {
  id            Int            @id @default(autoincrement())
  paymentId     Int
  recipientType String
  recipientId   Int
  message       String
  method        String
  status        String         @default("pending")
  sentAt        DateTime?
  createdAt     DateTime       @default(now())
  payment       PaymentRequest @relation(fields: [paymentId], references: [id])
}

model ContactPortalActivity {
  id        Int             @id @default(autoincrement())
  contactId Int
  paymentId Int?
  action    String
  ipAddress String?
  userAgent String?
  feedback  String?
  createdAt DateTime        @default(now())
  contact   Contact         @relation(fields: [contactId], references: [id])
  payment   PaymentRequest? @relation(fields: [paymentId], references: [id])
}

model Setting {
  id        Int      @id @default(autoincrement())
  category  String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key])
}

model RequestType {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  fieldConfig Json
  createdBy   Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  color       String?
  iconName    String?
  groups      RequestGroup[]
  creator     User           @relation("RequestTypeCreatedBy", fields: [createdBy], references: [id])
  requests    Request[]

  @@map("request_types")
}

model RequestGroup {
  id            Int               @id @default(autoincrement())
  name          String
  description   String?
  requestTypeId Int
  isActive      Boolean           @default(true)
  createdBy     Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  creator       User              @relation("RequestGroupCreatedBy", fields: [createdBy], references: [id])
  requestType   RequestType       @relation(fields: [requestTypeId], references: [id])
  subGroups     RequestSubGroup[]
  requests      Request[]         @relation("GroupRequests")

  @@map("request_groups")
}

model RequestSubGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  groupId     Int
  isActive    Boolean      @default(true)
  createdBy   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation("SubGroupCreatedBy", fields: [createdBy], references: [id])
  group       RequestGroup @relation(fields: [groupId], references: [id])
  requests    Request[]    @relation("SubGroupRequests")

  @@map("request_sub_groups")
}

model Request {
  id               Int                 @id @default(autoincrement())
  requestTypeId    Int
  title            String
  description      String?
  amount           Float?
  effectiveDate    DateTime?
  beneficiaryName  String?
  beneficiaryPhone String?
  contactId        Int?
  groupId          Int?
  status           String              @default("PENDING")
  creatorId        Int
  assigneeId       Int?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  subGroupId       Int?
  activities       RequestActivity[]
  attachments      RequestAttachment[]
  assignee         User?               @relation("RequestAssignedTo", fields: [assigneeId], references: [id])
  contact          Contact?            @relation("ContactRequests", fields: [contactId], references: [id])
  creator          User                @relation("RequestCreatedBy", fields: [creatorId], references: [id])
  group            RequestGroup?       @relation("GroupRequests", fields: [groupId], references: [id])
  requestType      RequestType         @relation(fields: [requestTypeId], references: [id])
  subGroup         RequestSubGroup?    @relation("SubGroupRequests", fields: [subGroupId], references: [id])

  @@map("requests")
}

model RequestAttachment {
  id         Int      @id @default(autoincrement())
  requestId  Int
  filePath   String
  fileType   String
  fileName   String
  uploadedBy Int
  uploadedAt DateTime @default(now())
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  uploader   User     @relation("RequestAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("request_attachments")
}

model RequestActivity {
  id        Int      @id @default(autoincrement())
  requestId Int
  userId    Int
  action    String
  details   Json?
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user      User     @relation("RequestActivityUser", fields: [userId], references: [id])

  @@map("request_activities")
}

enum Role {
  ADMIN
  FINANCIAL_MANAGER
  ACCOUNTANT
  SELLER
  CEO
  PROCUREMENT
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}
